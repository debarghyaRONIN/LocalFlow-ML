name: MLOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test with pytest
      run: |
        pytest
  
  train-model:
    name: Train Model
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start MLflow server
      run: |
        mkdir -p mlflow-artifacts
        nohup mlflow server --host 127.0.0.1 --port 5000 --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlflow-artifacts > mlflow.log 2>&1 &
        # Give MLflow server time to start
        sleep 10
        echo "MLflow server started"
        
    - name: Train model
      run: |
        export MLFLOW_TRACKING_URI=http://127.0.0.1:5000
        python pipelines/training/train.py
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          mlruns/
          mlflow-artifacts/
          mlflow.db
          models/
  
  build-and-deploy:
    name: Build and Deploy
    needs: train-model
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        
    - name: Debug Docker build environment
      run: |
        echo "Checking Docker build environment..."
        ls -la ./data/
        ls -la ./services/model-api/
        cat ./services/model-api/requirements.txt
        
    - name: Build Docker image
      run: |
        # Use the project root as build context and specify the Dockerfile path
        docker build -t model-api:latest -f ./services/model-api/Dockerfile . --progress=plain
      
    - name: Deploy to local Kubernetes (Minikube)
      run: |
        echo "In a real environment, you would push the Docker image to a registry and deploy to Kubernetes"
        echo "For local development, you can use 'make deploy-model' after building the image locally" 